import matplotlib.pyplot as plt

'''
x_range = [i/10 for i in range(5, 10)]
x_range.append(1.0)

fig = plt.figure()
ax = fig.add_subplot(111)

ax.set_xticks(x_range)
# cache size에 따른 hit ratio 비교
# global_ = [0, 0.27724082, 0.428904993, 0.536664401, 0.624326565, 0.701571831, 0.771260546, 0.83640011, 0.897638748, 0.954754677, 1]
# regional = [0, 0.339975828, 0.480431286, 0.581446617, 0.666510928, 0.741677527, 0.805405705, 0.862807579, 0.914845804, 0.961872683, 1]

# zipf 에 따른 hit ratio 비교
global_ = [0.28134087,	0.27724082,	0.277541739,	0.282262814,	0.283499564,	0.282421558]
regional = [0.312299183,	0.339975828,	0.370415043,	0.413422362,	0.460132322,	0.506017396]
ax.grid(True)
plt.xlabel("User density")
plt.ylabel("Hit ratio")
plt.xlim(0.5, 1.0)
plt.ylim(0.2, 0.55)
ax.plot(x_range, global_, 'b*-', label='Global')
ax.plot(x_range, regional, 'rs--', label='Regional')

ax.legend(loc=2)
plt.show()


# region마다 popularity 차이
import numpy as np
x_range = list()
for i in range(1000):
       x_range.append(i)

regionA = [0.0, 0.019583774700840096, 0.03953750402226085, 0.0588967865230765, 0.07807565594383278, 0.09830378897583407, 0.118628746648712, 0.13777349490368557, 0.15813308608640306, 0.17853912626377694, 0.19874506850087242, 0.21744641655149166, 0.23685031970568174, 0.25580626412978685, 0.2754466844936652, 0.2973919578156517, 0.31643247050187717, 0.33586906444389136, 0.35521280067119176, 0.37432189314962305, 0.3934558142279634, 0.4168542498175225, 0.43635617389902387, 0.45654266987490544, 0.47536355653346174, 0.495324701284911, 0.5146734028959837, 0.5363234233305039, 0.5573459113405306, 0.5774086058956236, 0.5969601055894962, 0.6172796146975652, 0.6376007199196557, 0.6576373446719692, 0.6772337635146535, 0.6974766186503077, 0.7179781692820952, 0.7370544856581014, 0.7557165522493704, 0.7785584076784544, 0.7984049826566234, 0.8185353678659603, 0.8407088429416466, 0.8604758643113839, 0.8815463812619978, 0.9006355371283629, 0.9200766409169516, 0.9401167576834439, 0.9594981088185685, 0.9806771413025624, 1.0]
regionB = [0.0, 0.020207331432782718, 0.04021393837888252, 0.06015582377725731, 0.07909494304635388, 0.09776222364061993, 0.11786734454727754, 0.13846558716000754, 0.15861754003836775, 0.17813775486786934, 0.19744077338722907, 0.21607479475245037, 0.23744490195641854, 0.2574656104076334, 0.27769727019318907, 0.29766579625785744, 0.3172356530619131, 0.3371745015792684, 0.3582931612796903, 0.3786779719635962, 0.3982908770799088, 0.41752649918826307, 0.4380453907588226, 0.45718630930429904, 0.47605943625066616, 0.4954795238457934, 0.5156547328440849, 0.5358717295484121, 0.5549876341466069, 0.5752928441928685, 0.5944823989810372, 0.6154464431229816, 0.6361333029308899, 0.6564971514994468, 0.6757492436702839, 0.6992435737599205, 0.7182240945611645, 0.7386336056488129, 0.7574492978126068, 0.7776934108031196, 0.7991037993264117, 0.8176808298691005, 0.8374018591843753, 0.8591002011789999, 0.8787695323659067, 0.8981907762606552, 0.9171430284186786, 0.9379525550808938, 0.9569014307871442, 0.9796017610768144, 1.0]
regionC = [0.0, 0.01973701494476095, 0.040717941686771196, 0.05984734655773197, 0.07925880888767528, 0.09785369621176025, 0.11887915532779758, 0.14026553795723862, 0.16027191897385523, 0.18028383998984251, 0.19991391288588456, 0.21828326243479568, 0.23736521459811216, 0.25642648352722563, 0.276193688903547, 0.29699083489283373, 0.31825248496460995, 0.33869059055970785, 0.35863807603364767, 0.3812060203215608, 0.40049794886189377, 0.4198373931531608, 0.43881112592021315, 0.4584273314078459, 0.4779780352860814, 0.4980838776643373, 0.5201983143335961, 0.5405400278554903, 0.5600077027672749, 0.581178184171871, 0.6008612290678472, 0.6204233966405703, 0.6423300721791938, 0.6617648800473839, 0.6809108504752747, 0.7005426725101389, 0.7196038609859322, 0.7387554048154404, 0.7587422171272694, 0.7792579073126508, 0.7989905477787734, 0.817609225452467, 0.8377928153169591, 0.8566887492985338, 0.8767840114807718, 0.8972387062857895, 0.9174123902750203, 0.9414221977536349, 0.9606200703305421, 0.9806620629849638, 1.0]
regionD = [0.0, 0.022535305707449604, 0.04478405158026774, 0.06526759360956323, 0.08561217592254951, 0.10456716926888616, 0.12459417657565758, 0.14377519522260768, 0.1653981962851746, 0.18499741471370346, 0.20455921022057527, 0.22320013700975608, 0.24217213075829244, 0.2617562849572645, 0.2813584298228348, 0.3023957600396674, 0.3222740695718007, 0.3412562717626211, 0.36033367416122164, 0.3794236802630572, 0.4008627035776046, 0.42079940921233916, 0.43997866565565164, 0.4608948948175904, 0.48095103879307144, 0.5045385742551052, 0.5240519945818788, 0.5447765435807955, 0.5652765200785465, 0.5851322867773603, 0.6059852590400997, 0.6251004325751028, 0.6449595432156929, 0.6643149545710926, 0.6846015814909254, 0.7046836540564007, 0.7240172781756651, 0.7432993207379528, 0.7621777226961199, 0.782607931201109, 0.8024378502970412, 0.8212128910406815, 0.8419471083179575, 0.8611111414489565, 0.8816348824147331, 0.9005941334933026, 0.9195337751028023, 0.9397811592210414, 0.9607388744957461, 0.9803304701922004, 1.0]

tmp = [np.array(regionA), np.array(regionB), np.array(regionC), np.array(regionD)]
global_ = [np.mean(k) for k in zip(*tmp)]
print(global_)

plt.xlabel('Content Id')
plt.ylabel('F(x)')

plt.xlim(0, 1000)
plt.xticks([0, 10, 20, 30, 40, 50])
plt.scatter(x_range, global_, s=10, label='Global')
plt.scatter(x_range, regionA, s=20, marker='x', alpha=0.5, label='RegionA')
plt.scatter(x_range, regionB, s=20, marker='+', alpha=0.5, label='RegionB')
plt.scatter(x_range, regionC, s=20, marker='v', alpha=0.5, label='RegionC')
plt.legend(loc=2)
plt.grid(True)

plt.show()
'''
'''
import numpy as np
x_range = list()
for i in range(50):
       x_range.append(i)

fig = plt.figure()
ax = fig.add_subplot(111)
plt.xlim(0, 50)
ax.set_xticks([0, 10, 20, 30, 40, 50])

regionA =[0.007844168392154661, 0.00913951056280161, 0.011303658834506316, 0.018560808190554393, 0.019066874577758134, 0.027817870596596853, 0.0104933867530616, 0.010958783267999189, 0.025287029008163788, 0.013707278174753458, 0.007643680948034301, 0.0078352633365141, 0.011489265579540065, 0.009433547096840321, 0.020495605610240032, 0.010861013446649356, 0.01853513489170725, 0.008868450979418498, 0.03206529443924642, 0.011321788218003913, 0.010664366223929982, 0.010883143882062981, 0.01320013290186353, 0.06916153879994613, 0.005799798307908955, 0.014972717067862703, 0.051704117980371334, 0.01644640886504216, 0.011966002036605375, 0.13330471488416135, 0.035371917083469595, 0.014448156573081353, 0.012485689428392408, 0.016887446748667555, 0.016092895906100142, 0.02938600703713754, 0.020442993747149876, 0.016424374903625454, 0.017511628909336524, 0.009516579500766094, 0.02907950220993851, 0.007296087058892576, 0.012438484390053304, 0.008967152129205508, 0.011139720061815602, 0.01626890219915346, 0.04607451913849113, 0.01742832590520702, 0.011689657637635104, 0.02021860557758253]
regionB = [0.011150550057987547, 0.00973748438940581, 0.017025254445417724, 0.025394605799098906, 0.01969364816370949, 0.05238313298261889, 0.008631945009620959, 0.010116571565279774, 0.012388171303059265, 0.02815376666987895, 0.007073942902521452, 0.010552839516671656, 0.011133383158087625, 0.015988454120854718, 0.007441461411685738, 0.011459001168197069, 0.010711243852070342, 0.008250671425373873, 0.030241578076777926, 0.017168349851120653, 0.01864979790284779, 0.014379470904692462, 0.015265640240669365, 0.019784874829320544, 0.007401984534366587, 0.011439607103356581, 0.133599388294461, 0.02192969987316613, 0.012071045754811464, 0.029698008455075288, 0.011590328631075477, 0.010210945053244313, 0.010175869290986541, 0.03542213987767528, 0.013426417593844506, 0.011735331647445023, 0.046555192344164116, 0.013700897490895236, 0.03248588637927953, 0.010944636126236073, 0.06781456640264784, 0.006058912069830796, 0.019092404751510854, 0.015884217538208803, 0.017322523836004643, 0.009909801231063494, 0.01319670425093912, 0.018809543258102444, 0.01645755384375807, 0.010290554620882306]
regionC = [0.017047365387959666, 0.016007269580765152, 0.0349431171205446, 0.010559293106029774, 0.021842415093552746, 0.13199401663412538, 0.010971313861550626, 0.016735763404389366, 0.010489858712434245, 0.009263256536520461, 0.008346716265421997, 0.01875997760195235, 0.0127012899600472, 0.024255487695518455, 0.007776462934801494, 0.015485823174707843, 0.015555960085688067, 0.013915558482740337, 0.050522039507013276, 0.007996106584617827, 0.00808446159973056, 0.009001033122004995, 0.016379720113752078, 0.023600039217899563, 0.008970123742522084, 0.011484424593172466, 0.03291488256970653, 0.009768949522230742, 0.021572506138156762, 0.0348922025165699, 0.013904414988841608, 0.013673616414553141, 0.010217803512876317, 0.012691996081386549, 0.011923837937434666, 0.012262809812166858, 0.0143921881674786, 0.008152544494411747, 0.06768185857164846, 0.0163000601221058, 0.01765908475558283, 0.007569454298854594, 0.04553899797446913, 0.008875493104539368, 0.03070312897138884, 0.008346526689256189, 0.015562155436507148, 0.026392463708611535, 0.013347339268393951, 0.01296679082336615]
regionD = [0.008262923967795472, 0.012591668098951795, 0.011689297110995525, 0.013183807920450874, 0.0484349083247384, 0.030501794826883418, 0.019637042980572617, 0.011058472102020373, 0.012779885336308191, 0.009610060488458291, 0.0143851084062629, 0.008813796576324048, 0.018595886741724178, 0.008961938405330319, 0.010151115587952553, 0.02526121443361486, 0.013784991395483549, 0.009238401626780064, 0.1347126792227319, 0.009544977605280752, 0.00776213926976898, 0.011879197414110813, 0.03602825661215812, 0.031689411973098956, 0.005718866251453189, 0.016268437456258073, 0.0272611044169481, 0.009659188337223058, 0.009803334882941783, 0.05132825285530588, 0.017385129726375934, 0.03006661962259546, 0.01728711735611844, 0.01058201348493944, 0.013504649362708808, 0.016111240365098325, 0.018357022739593012, 0.009149042665443759, 0.017789034606986994, 0.022167085478026486, 0.01884000549688088, 0.007627744801924645, 0.013836325965364792, 0.009018501331974902, 0.016386003155425814, 0.009680069626245135, 0.02089914223749476, 0.06802857331403689, 0.008484194994747783, 0.016202323040090755]

tmp = [np.array(regionA), np.array(regionB), np.array(regionD)]
global_ = [np.mean(k) for k in zip(*tmp)]
print(global_)

ax.grid(True)
plt.xlabel("Content Id ")
plt.ylabel("Popularity")
ax.plot(x_range, regionA, '--', label='RegionA')
ax.plot(x_range, regionB, '-.', label='RegionB')
ax.plot(x_range, regionC, ':', label='RegionC')
ax.plot(x_range, global_, '-', label='Global')

ax.legend(loc=1)
plt.show()
'''

import numpy as np
x_range = [0.0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0]
fig = plt.figure()
ax = fig.add_subplot(111)
plt.xlim(0.0, 1.0)
ax.set_xticks(x_range)
ax.set_ylim(0.0, 1.0)
# ax.set_yticks(x_range)


global_ = [0, 0.140195375, 0.351047123, 0.425913321, 0.479669781, 0.558903622, 0.636328281, 0.725114174, 0.806913373, 0.889299499, 1]
regional_pred = [0, 0.331030525, 0.467990478, 0.562710576, 0.651841626, 0.730712343, 0.797690976, 0.847739821, 0.898652554, 0.956935717, 1]
regional_nonpred = [0, 0.280232684, 0.420473227, 0.537233195, 0.625011637, 0.714840963, 0.783012894, 0.843671603, 0.901174029, 0.948387181, 1]

ax.grid(True)
plt.xlabel("Normalized Cache Size")
plt.ylabel("Hit Ratio")
ax.plot(x_range, regional_pred, '-', label='Clustered_Pred')
ax.plot(x_range, regional_nonpred, ':.', label='Clustered')
ax.plot(x_range, global_, '--.', label='Unclustered')

ax.legend(loc=2)
plt.show()

